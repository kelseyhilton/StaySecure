using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace StaySecure
{
    public class VulnerabilityType
    {
        public int Id { get; set; }
        public string TypeName { get; set; }
        public string Description { get; set; }
    }

    public class Vulnerability
    {
        public Vulnerability(Vulnerability vulnerability)
        {
            string sql = "insert into Vulnerabilities (ReportId, Description, TypeId) values ('" + vulnerability.ReportId + "','" + vulnerability.Description + "', " + vulnerability.Type.Id + ")";
            OperateOnDb(sql);
        }
        public Vulnerability() { }

        public Guid Id { get; set; }
        public Guid ReportId { get; set; }
        public string Description { get; set; }
        public VulnerabilityType Type { get; set; }

        private void OperateOnDb(string sqlCommandText)
        {
            var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
            System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString);

            System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
            cmd.CommandType = System.Data.CommandType.Text;
            cmd.CommandText = sqlCommandText;
            cmd.Connection = connection;

            connection.Open();
            cmd.ExecuteNonQuery();
            connection.Close();
        }

        public List<Vulnerability> GetAllVulnerabilities()
        {
            List<Vulnerability> vulnerabilities = new List<Vulnerability>();
            var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
            System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString);

            using (connection)
            {
                SqlCommand command = new SqlCommand("SELECT Id, ReportId, Description, TypeId FROM Vulnerabilities;", connection);
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();

                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        Vulnerability vulnerability = new Vulnerability()
                        {
                            Id = reader.GetGuid(0),
                            ReportId = reader.GetGuid(1),
                            Description = reader.GetString(2),
                            Type = GetType(reader.GetInt32(3))//can I call the db twice like this?
                        };
                        vulnerabilities.Add(vulnerability);
                    }
                }
                else
                {
                    Console.WriteLine("No rows found.");// don't really want to write this. 
                }
                reader.Close();
            }
            return vulnerabilities;
        }

        public void SaveOrUpdateVulnerability(Vulnerability vulnerability)
        {
            //id, reportId, description, type
            //string sql = "insert into Vulnerabilities (Id, ReportId, Description, TypeId) values ('"+ vulnerability.Id+"', '"+ vulnerability.ReportId + "','"+vulnerability.Description+"', "+ vulnerability.Type.Id+")";
            string sql = "update Vulnerabilities set ReportId='" + vulnerability.ReportId + "', Description='" + vulnerability.Description + "', TypeId= " + vulnerability.Type.Id + " where Id = '" + vulnerability.Id + "';";
            OperateOnDb(sql);
        }


        public VulnerabilityType GetType(int typeId) {
            VulnerabilityType type = new VulnerabilityType();
            return type;
        }

    }
}
